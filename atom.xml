<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brave&#39;s Blog</title>
  <subtitle>骤然临之而不惊 无故加之而不怒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.bravel.com.cn/"/>
  <updated>2017-03-07T02:11:41.121Z</updated>
  <id>http://blog.bravel.com.cn/</id>
  
  <author>
    <name>Brave</name>
    <email>p_li@bravel.com.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>产生一个随机数</title>
    <link href="http://blog.bravel.com.cn/2017/03/07/%E4%BA%A7%E7%94%9F%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://blog.bravel.com.cn/2017/03/07/产生一个随机数/</id>
    <published>2017-03-07T02:09:11.000Z</published>
    <updated>2017-03-07T02:11:41.121Z</updated>
    
    <content type="html">&lt;p&gt;因为阿里的实习生笔试遇到类似题目，整理一下产生随机数的实现方法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先需要一个参数化的引擎类型，可以使用&lt;code&gt;default_random_engine&lt;/code&gt;。参数化的引擎适配器类都是模板。&lt;br&gt;标准库还定义了一组分布模板，根据不同的概率分布生成随机数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;均匀分布&lt;br&gt;uniform_int_distribution&amp;lt; IntT&amp;gt; u(m,n);&lt;br&gt;uniform_real_distribution&amp;lt; RealT&amp;gt; u(x,y);&lt;/li&gt;
&lt;li&gt;正态分布&lt;br&gt;normal_distribution&amp;lt; RealT&amp;gt; n(m,s);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生服从均匀分布的代码具体实现如下&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// uniform_int_distribution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;random&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nrolls = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// number of experiments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nstars = &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// maximum number of stars to distribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::default_random_engine generator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::uniform_int_distribution&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; distribution(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]=&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nrolls; ++i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = distribution(generator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++p[number];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;uniform_int_distribution (0,9):&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;(p[i]*nstars/nrolls,&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// uniform_real_distribution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;random&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nrolls=&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// number of experiments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nstars=&lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// maximum number of stars to distribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nintervals=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// number of intervals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::default_random_engine generator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::uniform_real_distribution&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt; distribution(&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p[nintervals]=&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nrolls; ++i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; number = distribution(generator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++p[&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(nintervals*number)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;uniform_real_distribution (0.0,1.0):&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::fixed; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;.precision(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nintervals; ++i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;(i)/nintervals &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)/nintervals &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;(p[i]*nstars/nrolls,&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;产生服从正态分布的代码具体实现如下&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// normal_distribution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;random&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nrolls=&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// number of experiments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; nstars=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// maximum number of stars to distribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::default_random_engine generator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::normal_distribution&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt; distribution(&lt;span class=&quot;number&quot;&gt;5.0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]=&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nrolls; ++i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; number = distribution(generator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((number&amp;gt;=&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;)&amp;amp;&amp;amp;(number&amp;lt;&lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;)) ++p[&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(number)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;normal_distribution (5.0,2.0):&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; ++i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; &amp;lt;&amp;lt; (i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;(p[i]*nstars/nrolls,&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.cplusplus.com/reference/random/uniform_int_distribution/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;std::uniform_int_distribution&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;http://www.cplusplus.com/reference/random/uniform_real_distribution/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;std::uniform_real_distribution&lt;/a&gt;&lt;br&gt;3.&lt;a href=&quot;http://www.cplusplus.com/reference/random/normal_distribution/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;std::normal_distribution&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;因为阿里的实习生笔试遇到类似题目，整理一下产生随机数的实现方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.bravel.com.cn/tags/C/"/>
    
      <category term="随机数" scheme="http://blog.bravel.com.cn/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CPP中成员对象选择操作符和成员指针选择符</title>
    <link href="http://blog.bravel.com.cn/2016/09/09/CPP%E4%B8%AD%E6%88%90%E5%91%98%E5%AF%B9%E8%B1%A1%E9%80%89%E6%8B%A9%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E6%88%90%E5%91%98%E6%8C%87%E9%92%88%E9%80%89%E6%8B%A9%E7%AC%A6/"/>
    <id>http://blog.bravel.com.cn/2016/09/09/CPP中成员对象选择操作符和成员指针选择符/</id>
    <published>2016-09-09T01:48:25.000Z</published>
    <updated>2017-03-09T01:50:21.421Z</updated>
    
    <content type="html">&lt;p&gt;C++中支持仅能指向类成员的指针，对这种类型的指针进行数据的提取操作时，可使用如下两种类型的操作符：成员对象选择操作符&lt;code&gt;.*&lt;/code&gt;和成员指针选择符&lt;code&gt;-&amp;gt;*&lt;/code&gt;下面来具体举例子说明这两种用法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;成员对象选择操作符&quot;&gt;&lt;a href=&quot;#成员对象选择操作符&quot; class=&quot;headerlink&quot; title=&quot;成员对象选择操作符   .*&quot;&gt;&lt;/a&gt;成员对象选择操作符   .*&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; z = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    demo d1, d2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; demo::*iPtr;&lt;span class=&quot;comment&quot;&gt;//a pointer of a int member in class of demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    iPtr = &amp;amp;demo::x;&lt;span class=&quot;comment&quot;&gt;//point to demo member x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d1.*iPtr = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//set d1.x = 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d2.*iPtr = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//set d2.x = 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;成员指针选择符-gt&quot;&gt;&lt;a href=&quot;#成员指针选择符-gt&quot; class=&quot;headerlink&quot; title=&quot;成员指针选择符   -&amp;gt;*&quot;&gt;&lt;/a&gt;成员指针选择符   -&amp;gt;*&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;in f&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    demo d1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    demo * ptr = &amp;amp;d1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (demo::*fPtr) ();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fPtr = &amp;amp;demo::f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; (ptr-&amp;gt;*fPtr)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/C%E5%92%8CC%2B%2B%E9%81%8B%E7%AE%97%E5%AD%90&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C和C++运算符&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;C++中支持仅能指向类成员的指针，对这种类型的指针进行数据的提取操作时，可使用如下两种类型的操作符：成员对象选择操作符&lt;code&gt;.*&lt;/code&gt;和成员指针选择符&lt;code&gt;-&amp;gt;*&lt;/code&gt;下面来具体举例子说明这两种用法。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.bravel.com.cn/tags/C/"/>
    
      <category term="指针" scheme="http://blog.bravel.com.cn/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>关联容器</title>
    <link href="http://blog.bravel.com.cn/2016/08/06/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    <id>http://blog.bravel.com.cn/2016/08/06/关联容器/</id>
    <published>2016-08-06T15:22:26.000Z</published>
    <updated>2017-03-06T15:37:10.094Z</updated>
    
    <content type="html">&lt;p&gt;关联容器支持高效的关键字查找和访问。两个主要的&lt;strong&gt;关联容器&lt;/strong&gt;类型是&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;。&lt;code&gt;map&lt;/code&gt;中的元素是一些关键字-值（key-value）对：关键字起到索引的作用，值则表示与索引相关联的数据。&lt;code&gt;set&lt;/code&gt;中每个元素只包含一个关键字，&lt;code&gt;set&lt;/code&gt;支持高效的关键字查询操作–检查一个给定关键字是否存在&lt;code&gt;set&lt;/code&gt;中。&lt;br&gt;简单来说，&lt;code&gt;map&lt;/code&gt;可以理解为关键字-值对的集合，可以称为关联数组。而&lt;code&gt;map&lt;/code&gt;可以理解为关键字的简单集合。当只是想知道一个值是否存在时，&lt;code&gt;set&lt;/code&gt;是最有用的。&lt;br&gt;而在标准库中提供8个关联容器，这8个关联容器的不同主要体现在一下三个维度上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;或者是一个&lt;code&gt;map&lt;/code&gt;，或者是一个&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者要求不重复的关键字，或者允许出现重复的关键字&lt;/li&gt;
&lt;li&gt;按顺序保存元素，或者无序保存元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;根据这三个特征定义出的8个关联容器如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;按关键字有序保存元素&lt;/strong&gt;（按照关键字升序排列）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;map 关联数组，保存关键字-键对&lt;/li&gt;
&lt;li&gt;set 关键字即值，即只保存关键字容器&lt;/li&gt;
&lt;li&gt;multimap 关键字可重复出现的map&lt;/li&gt;
&lt;li&gt;multiset 关键字可重复出现的set&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;无序集合&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;unordered_map 用哈希函数组织的map&lt;/li&gt;
&lt;li&gt;unordered_set 用哈希函数组织的set&lt;/li&gt;
&lt;li&gt;unordered_multimap 用哈希函数组织的map：关键字可以重复出现&lt;/li&gt;
&lt;li&gt;unordered_multiset 用哈希函数组织的set：关键字可以重复出现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类型map和multimap定义在头文件map中；set和multiset定义在头文件set中；无序容易则定义在头文件unordered_map和unordered_set中。&lt;/p&gt;
&lt;h2 id=&quot;关联容器的使用&quot;&gt;&lt;a href=&quot;#关联容器的使用&quot; class=&quot;headerlink&quot; title=&quot;关联容器的使用&quot;&gt;&lt;/a&gt;关联容器的使用&lt;/h2&gt;&lt;h3 id=&quot;使用map&quot;&gt;&lt;a href=&quot;#使用map&quot; class=&quot;headerlink&quot; title=&quot;使用map&quot;&gt;&lt;/a&gt;使用map&lt;/h3&gt;&lt;p&gt;一个经典的使用关联数组的例子就是单词计数程序&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;&amp;gt; wordCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; &amp;gt;&amp;gt; word)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++ wordCount[word];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &amp;amp;w : wordCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; w.first &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot; occurs &quot;&lt;/span&gt; &amp;lt;&amp;lt; w.second &amp;lt;&amp;lt; ((w.second &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&quot; times&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot; time&quot;&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述是一个比较经典的使用&lt;code&gt;map&lt;/code&gt;的例子，类似顺序容器，关联容器也是模板。为了定义一个&lt;code&gt;map&lt;/code&gt;，我们必须指定关键字和值的类型。&lt;/p&gt;
&lt;h3 id=&quot;使用set&quot;&gt;&lt;a href=&quot;#使用set&quot; class=&quot;headerlink&quot; title=&quot;使用set&quot;&gt;&lt;/a&gt;使用set&lt;/h3&gt;&lt;p&gt;根据上述程序做一个扩展，忽略常见单词，如“the”、“and”、“or”等。这个时候我们可以用&lt;code&gt;set&lt;/code&gt;来存储这些关键字。具体实现如下所示：&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;,size_t&amp;gt; wordCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; exculde = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;The&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;And&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Or&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;the&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;and&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;or&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;while&lt;/span&gt;(cin &amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;if&lt;/span&gt;(exculde.&lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;) == exculde.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++ wordCount[&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;和&lt;code&gt;map&lt;/code&gt;类似，&lt;code&gt;set&lt;/code&gt;也是模板，所以为了定义一个&lt;code&gt;set&lt;/code&gt;必须指定其元素类型。至于判定该元素是否在忽略字符串集合中，利用find调用之后返回的迭代器来判断，当&lt;code&gt;set&lt;/code&gt;中存在这个元素时，find会返回指向这个位置的迭代器，否则，find会返回尾后迭代器。&lt;/p&gt;
&lt;h2 id=&quot;关联容器概述&quot;&gt;&lt;a href=&quot;#关联容器概述&quot; class=&quot;headerlink&quot; title=&quot;关联容器概述&quot;&gt;&lt;/a&gt;关联容器概述&lt;/h2&gt;&lt;p&gt;关联容器不支持顺序容器关于位置相关的操作，比如&lt;code&gt;push_back&lt;/code&gt;、&lt;code&gt;push_front&lt;/code&gt;。原因是关联容器中元素是根据关键字存储的，这些操作对于关联容器是没有意义的。关联容器也不支持构造函数或插入操作这些接受一个元素值和一个数量值的操作。&lt;br&gt;并且关联容器迭代器都是双向的。&lt;/p&gt;
&lt;p&gt;当初始化一个&lt;code&gt;map&lt;/code&gt;时，必须提供关键字类型和值类型。我们将每个关键字-值包围在花括号里，如&lt;code&gt;{key,value}&lt;/code&gt;,一组键值对一起构成了&lt;code&gt;map&lt;/code&gt;中的一个元素。在每个花括号中，关键字是第一个元素，值是第二个。&lt;/p&gt;
&lt;h3 id=&quot;关键字类型的要求&quot;&gt;&lt;a href=&quot;#关键字类型的要求&quot; class=&quot;headerlink&quot; title=&quot;关键字类型的要求&quot;&gt;&lt;/a&gt;关键字类型的要求&lt;/h3&gt;&lt;p&gt;对于有序容器–&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;multimap&lt;/code&gt;、&lt;code&gt;multiset&lt;/code&gt;，关键字类型必须定义元素比较的方法（这样才可以实现关键字有序）。默认情况下，标准库使用关键字类型的&lt;code&gt;&amp;lt;&lt;/code&gt;运算符来比较两个关键字。在集合类型中，关键字类型就是元素类型；在映射类型中，关键字类型是元素的第一部分的类型。&lt;br&gt;所提供的操作必须在关键字类型上定义一个&lt;strong&gt;严格弱序&lt;/strong&gt;。如果两个关键字是等价的（即，任何一方都不“小于等于”另一个），那么容器将它们视为相等来处理。当用作 &lt;code&gt;map&lt;/code&gt;的关键字时，只能有一个元素与这两个关键字相关联，而且可以使用这两个关键字其中之一来访问对应的值。&lt;br&gt;用来组织一个容器中元素的操作的类型也是该容器类型的一部分。为了指定使用自定义的操作，必须在定义关联容器类型是提供此操作的类型。&lt;br&gt;举例如下所示：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compareIsbn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SalesData &amp;amp;lhs,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SalesData &amp;amp;rhs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return lhs.isbn() &amp;lt; rhs.isbn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;multiset&lt;/span&gt;&amp;lt;SalesData,&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;(compareIsbn)*&amp;gt; bookstore(compareIsbn);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;pair-类型&quot;&gt;&lt;a href=&quot;#pair-类型&quot; class=&quot;headerlink&quot; title=&quot;pair 类型&quot;&gt;&lt;/a&gt;pair 类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pair&lt;/code&gt;类型定义在头文件utility中。一个&lt;code&gt;pair&lt;/code&gt;保存两个数据成员。类似容器，&lt;code&gt;pair&lt;/code&gt;是一个用来生成特定类型的模板。当创建一个&lt;code&gt;pair&lt;/code&gt;时，我们必须提供两个类型名，&lt;code&gt;pair&lt;/code&gt;的数据成员将具有对应的类型，不过两个类型不要求一样。&lt;/p&gt;
&lt;p&gt;与其他标准库类型不同，&lt;code&gt;pair&lt;/code&gt;的数据成员是&lt;code&gt;public&lt;/code&gt;的。两个成员分别命名为 &lt;code&gt;first&lt;/code&gt;和&lt;code&gt;second&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;关联容器操作&quot;&gt;&lt;a href=&quot;#关联容器操作&quot; class=&quot;headerlink&quot; title=&quot;关联容器操作&quot;&gt;&lt;/a&gt;关联容器操作&lt;/h2&gt;&lt;h3 id=&quot;关联容器迭代器&quot;&gt;&lt;a href=&quot;#关联容器迭代器&quot; class=&quot;headerlink&quot; title=&quot;关联容器迭代器&quot;&gt;&lt;/a&gt;关联容器迭代器&lt;/h3&gt;&lt;p&gt;一个&lt;code&gt;map&lt;/code&gt;的&lt;code&gt;value_type&lt;/code&gt;是一个&lt;code&gt;pair&lt;/code&gt;类型，我们可以改变&lt;code&gt;pair&lt;/code&gt;的值，但不能改变关键字成员的值。迭代器在使用时，不能更改关键字的值，因为其是const的。&lt;br&gt;&lt;code&gt;set&lt;/code&gt;的迭代器是const的，迭代器只允许只读访问&lt;code&gt;set&lt;/code&gt;中的元素。与不能改变一个&lt;code&gt;map&lt;/code&gt;元素的关键字一样，一个&lt;code&gt;set&lt;/code&gt;中的关键字也是const的。可以用一个&lt;code&gt;set&lt;/code&gt;迭代器来读取元素的值，但不能修改。&lt;br&gt;通常我们不对关联容器使用泛型算法。关键字是const这一特性意味不能将关联容器传递给修改或重排容器元素的算法，因为这类算法需要向元素写入值，而&lt;code&gt;set&lt;/code&gt;类型中的元素是const的，&lt;code&gt;map&lt;/code&gt;中的元素是&lt;code&gt;pair&lt;/code&gt;的，其第一个成员是const的。&lt;br&gt;对于关联容器我们一般进行的操作就是添加键值对或关键字，查询操作。当然，便利的操作是一种低效的查询方式，在关联容器中提供了一种查询方法&lt;code&gt;find&lt;/code&gt;，这种专门为关联容器定义的&lt;code&gt;find&lt;/code&gt;成员会比调用其他的方法效率高很多。&lt;/p&gt;
&lt;h3 id=&quot;添加元素&quot;&gt;&lt;a href=&quot;#添加元素&quot; class=&quot;headerlink&quot; title=&quot;添加元素&quot;&gt;&lt;/a&gt;添加元素&lt;/h3&gt;&lt;p&gt;&lt;code&gt;set&lt;/code&gt;的&lt;code&gt;insert&lt;/code&gt;存在两个版本，分别接受一对迭代器，或是一个初始化列表。&lt;br&gt;&lt;code&gt;map&lt;/code&gt;的&lt;code&gt;insert&lt;/code&gt;，必须 记住元素类型是&lt;code&gt;pair&lt;/code&gt;。通常对于要插入的数据，并没有现成的&lt;code&gt;pair&lt;/code&gt;对象。可以在&lt;code&gt;insert&lt;/code&gt;的参数创建一个&lt;code&gt;pair&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wordCount.insert(&amp;#123;&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wordCount.insert(make_pair(&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wordCount.insert(pair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;,size_t&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wordCount.insert(&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;,size_t&amp;gt;::value_type(&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;insert&lt;/code&gt;的返回值，返回值依赖于容器类型和参数，对于&lt;strong&gt;不包含重复关键字&lt;/strong&gt;的容器，添加单一元素的&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;emplace&lt;/code&gt;版本会返回一个&lt;code&gt;pair&lt;/code&gt;，告诉我们插入操作是否成功。&lt;code&gt;pair&lt;/code&gt;的first成员是一个迭代器，指向具有给定关键字的元素；second成员是一个bool值，指出元素是插入成功还是已经存在于容器中。若元素已经存在于容器中，则&lt;code&gt;insert&lt;/code&gt;什么事情也不错，返回值中的bool部分为false。&lt;br&gt;下面举一个统计每个单词在输入中出现次数的例子：&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;,size_t&amp;gt; wordCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;while&lt;/span&gt;(cin &amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; ret = wordCount.insert(&amp;#123;&lt;span class=&quot;keyword&quot;&gt;word&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;if&lt;/span&gt;(!ret.second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++ ret.first-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述例子中，ret的类型为&lt;code&gt;pair&amp;lt;map&amp;lt;string,size_t&amp;gt;::iterator,bool&amp;gt; ret= wordCount.insert({word,1})&lt;/code&gt;&lt;br&gt;对于&lt;strong&gt;允许重复关键字&lt;/strong&gt;的容器，接受单个元素的&lt;code&gt;insert&lt;/code&gt;操作返回一个指向新元素的迭代器。这里无须返回一个bool值，因为每次&lt;code&gt;insert&lt;/code&gt;总是向这类容器中写入一个新元素。&lt;/p&gt;
&lt;h3 id=&quot;删除元素&quot;&gt;&lt;a href=&quot;#删除元素&quot; class=&quot;headerlink&quot; title=&quot;删除元素&quot;&gt;&lt;/a&gt;删除元素&lt;/h3&gt;&lt;p&gt;关联容器定义了三个版本的&lt;code&gt;erase&lt;/code&gt;，与顺序容器一样，我们可以通过传递给&lt;code&gt;erase&lt;/code&gt;一个迭代器或一个迭代器对来删除一个元素或者一个元素范围。当指定元素被删除以后返回void。&lt;br&gt;而关联容器提供一个额外的删除操作，它可以接受一个key_type参数。此版本删除所有匹配给定关键字的元素，返回实际删除的元素的数量。&lt;br&gt;所以对于保存不重复关键字的容器，&lt;code&gt;erase&lt;/code&gt;的返回值总是0或1。若返回值为0，则表明想要删除的元素并不在容器里。&lt;br&gt;对允许重复关键字的容器，删除元素的数量可能大于1；&lt;/p&gt;
&lt;h3 id=&quot;map的下标操作&quot;&gt;&lt;a href=&quot;#map的下标操作&quot; class=&quot;headerlink&quot; title=&quot;map的下标操作&quot;&gt;&lt;/a&gt;map的下标操作&lt;/h3&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;unordered_map&lt;/code&gt;容器提供了下标运算符和一个对应的at函数。&lt;code&gt;set&lt;/code&gt;不支持下标操作，因为&lt;code&gt;set&lt;/code&gt;中没有与关键字相关联的值。并且也不能对&lt;code&gt;multimap&lt;/code&gt;或一个&lt;code&gt;unordered_multimap&lt;/code&gt;进行下标操作，因为这些容器中可能有多个值与一个关键字想关联。&lt;br&gt;&lt;strong&gt;下标运算符，如果此关键字不在&lt;code&gt;map&lt;/code&gt;中，会为它创建一个元素并插入到&lt;code&gt;map&lt;/code&gt;中。&lt;/strong&gt;&lt;br&gt;&lt;code&gt;at&lt;/code&gt;函数，访问关键字对应的元素，并带有参数检查，若关键字不在关联容器中，会抛出一个out_of_range异常。&lt;br&gt;至于返回值，需要重点关注一下返回值的类型，当对&lt;code&gt;map&lt;/code&gt;进行下标操作时，会获得一个&lt;code&gt;mapped_type&lt;/code&gt;对象；但当解引用一个&lt;code&gt;map&lt;/code&gt;迭代器时，会得到一个&lt;code&gt;value_type&lt;/code&gt;对象。&lt;/p&gt;
&lt;h3 id=&quot;访问元素&quot;&gt;&lt;a href=&quot;#访问元素&quot; class=&quot;headerlink&quot; title=&quot;访问元素&quot;&gt;&lt;/a&gt;访问元素&lt;/h3&gt;&lt;p&gt;关联容器提供多种查找一个指定元素的方法。如果我们只是关心一个特定元素是否包含在容器中，&lt;code&gt;find&lt;/code&gt;是最好的选择。对于不允许重复关键字的容器，可能使用&lt;code&gt;find&lt;/code&gt;还是&lt;code&gt;count&lt;/code&gt;并没有什么区别，但对于允许重复关键字的容器，&lt;code&gt;count&lt;/code&gt;还会做更多的工作：如果关键字在容器中，还会统计关键字出现的次数，而&lt;code&gt;find&lt;/code&gt;不会做这个操作。&lt;br&gt;&lt;code&gt;find&lt;/code&gt;会返回一个迭代器，指向关键字对应的元素，若关键字不在容器中，则返回尾后迭代器。&lt;br&gt;&lt;code&gt;count&lt;/code&gt;会返回关键字等于关键字的元素的数量，对于不允许重复关键字的容器，返回值永远是0和1。&lt;br&gt;&lt;code&gt;c.lower_bound(k)&lt;/code&gt;返回一个迭代器，指向第一个关键字不小于k的元素。&lt;br&gt;&lt;code&gt;c.upper_bound(k)&lt;/code&gt;返回一个迭代器，指向第一个关键字大于k的元素。&lt;br&gt;&lt;code&gt;c.equal_range(k)&lt;/code&gt;返回一个迭代器&lt;code&gt;pair&lt;/code&gt;，表示关键字等于k的元素的范围。若k不存在，&lt;code&gt;pair&lt;/code&gt;的两个成员均等于c.end();&lt;/p&gt;
&lt;p&gt;对&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;unordered_map&lt;/code&gt;类型，下标运算符提供了最简单的提取元素的方法。但是如我们所见，使用下标操作有一个非常严重的副作用：如果关键字在&lt;code&gt;map&lt;/code&gt;中不存在，下标操作会插入一个具有给定关键字的元素。这种行为有时候会引来错误。所以当我们只是想知道一个给定关键字是否存在与&lt;code&gt;map&lt;/code&gt;中，而不想改变&lt;code&gt;map&lt;/code&gt;。这样就不能使用下标运算符来检查一个元素是否存在。&lt;br&gt;在&lt;code&gt;multimap&lt;/code&gt;或&lt;code&gt;multiset&lt;/code&gt;中查找元素，如果其中多个元素具有给定的关键字，则这些元素在容器中会相邻存储。&lt;br&gt;对于提取出这些相同的元素有三种思路，具体如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用&lt;code&gt;count&lt;/code&gt;返回这个关键字对应的元素的数目，利用&lt;code&gt;find&lt;/code&gt;函数返回关键字对应的第一个元素的迭代器。&lt;/li&gt;
&lt;li&gt;可以借用&lt;code&gt;upper_bound&lt;/code&gt;和&lt;code&gt;lower_bound&lt;/code&gt;的返回迭代器来确定相同元素的范围，如果返回相同的迭代器，则给定的关键字不在容器中。&lt;/li&gt;
&lt;li&gt;直接调用&lt;code&gt;equal_range&lt;/code&gt;函数，返回一个迭代器&lt;code&gt;pair&lt;/code&gt;，若关键字存在，则第一个迭代器指向第一个与关键字匹配的元素，第二个关键字指向最后一个匹配元素之后的位置。若未找到匹配元素，则两个迭代器都指向关键字可以插入的位置。即两个迭代器是相等的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;一个关于单词转换的map&quot;&gt;&lt;a href=&quot;#一个关于单词转换的map&quot; class=&quot;headerlink&quot; title=&quot;一个关于单词转换的map&quot;&gt;&lt;/a&gt;一个关于单词转换的map&lt;/h3&gt;&lt;p&gt;在最后举一个应用之前所学的例子，具体程序功能如下所示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个string，将它转换为另一个string。程序的输入是两个文件。第一个保存的是一些规则，用来转换第二个文件中的文本。每条规则由两部分组成：一个可能出现在输入文件中的单词和一个用来替代它的词语。表达的含义是，每当第一个单词在输入中时，我们就将它替代为对应的短语。第二个输入文本包含要转换的文本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体实现代码如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; bulidMap(ifstream &amp;amp;mapFile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; transMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (mapFile &amp;gt;&amp;gt; key &amp;amp;&amp;amp; getline(mapFile, value))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value.size() &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            transMap[key] = value.substr(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return transMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp; &lt;span class=&quot;title&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;s, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt; &amp;amp;m)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; mapIt = m.find(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mapIt != m.cend())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return mapIt-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wordTransform&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ifstream &amp;amp;mapfile, ifstream &amp;amp;input)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; transMap = bulidMap(mapfile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (getline(input, text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;istringstream&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(text)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; firstWord = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (strm &amp;gt;&amp;gt; word)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstWord)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                firstWord = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; transform(word, transMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;ifstream &lt;span class=&quot;title&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::ifstream::in)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;ifstream &lt;span class=&quot;title&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;replace.txt&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::ifstream::in)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wordTransform(replace, input);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;无序容器&quot;&gt;&lt;a href=&quot;#无序容器&quot; class=&quot;headerlink&quot; title=&quot;无序容器&quot;&gt;&lt;/a&gt;无序容器&lt;/h2&gt;&lt;p&gt;在新标准中定义了4个&lt;strong&gt;无序容器&lt;/strong&gt;，这些容器不是使用比较运算符来组织元素的，而是使用了一个&lt;strong&gt;哈希函数&lt;/strong&gt;和关键字类型的&lt;code&gt;==&lt;/code&gt;运算符。&lt;/p&gt;
&lt;h3 id=&quot;管理桶&quot;&gt;&lt;a href=&quot;#管理桶&quot; class=&quot;headerlink&quot; title=&quot;管理桶&quot;&gt;&lt;/a&gt;管理桶&lt;/h3&gt;&lt;p&gt;无序容器在存储上组织为一组桶，每个桶保存零个或多个元素。无序容器使用一个哈希函数将元素映射到桶。如果容器允许重复关键字，所有具有相同关键字的元素都会在同一个桶里。因此，无序容器的性能依赖于哈希函数的质量和桶的数量和大小。&lt;/p&gt;
&lt;p&gt;理想情况下，哈希函数将每个特定的映射到唯一的桶。但是，将不同关键字的元素映射到相同的桶也是允许的。当一个桶保存多个元素时，需要顺序搜索这些元素来查找我们想要的元素。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关联容器支持高效的关键字查找和访问。两个主要的&lt;strong&gt;关联容器&lt;/strong&gt;类型是&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;。&lt;code&gt;map&lt;/code&gt;中的元素是一些关键字-值（key-value）对：关键字起到索引的作用，值则表示与索引相关联的数据。&lt;code&gt;set&lt;/code&gt;中每个元素只包含一个关键字，&lt;code&gt;set&lt;/code&gt;支持高效的关键字查询操作–检查一个给定关键字是否存在&lt;code&gt;set&lt;/code&gt;中。&lt;br&gt;简单来说，&lt;code&gt;map&lt;/code&gt;可以理解为关键字-值对的集合，可以称为关联数组。而&lt;code&gt;map&lt;/code&gt;可以理解为关键字的简单集合。当只是想知道一个值是否存在时，&lt;code&gt;set&lt;/code&gt;是最有用的。&lt;br&gt;而在标准库中提供8个关联容器，这8个关联容器的不同主要体现在一下三个维度上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;或者是一个&lt;code&gt;map&lt;/code&gt;，或者是一个&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者要求不重复的关键字，或者允许出现重复的关键字&lt;/li&gt;
&lt;li&gt;按顺序保存元素，或者无序保存元素。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.bravel.com.cn/tags/C/"/>
    
      <category term="关联容器" scheme="http://blog.bravel.com.cn/tags/%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>迭代器</title>
    <link href="http://blog.bravel.com.cn/2016/08/01/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://blog.bravel.com.cn/2016/08/01/迭代器/</id>
    <published>2016-08-01T15:26:07.000Z</published>
    <updated>2017-03-06T15:36:43.107Z</updated>
    
    <content type="html">&lt;p&gt;除了每个容器定义的迭代器之外，标准库在头文件iterator中还定义了额外几种迭代器。这些迭代器包括以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入迭代器：这些迭代器被绑定到一个容器上，可用来向容器插入元素&lt;/li&gt;
&lt;li&gt;流迭代器：这些迭代器被绑定到输入或输出流上，可用来遍历所有关联的IO流&lt;/li&gt;
&lt;li&gt;反向迭代器：这些迭代器向后而不是向前移动。除了forward_list之外的标准库容器都有反向迭代器&lt;/li&gt;
&lt;li&gt;移动迭代器：这些专用的迭代器不是拷贝其中的元素，而是移动它们&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用算法操作流迭代器&quot;&gt;&lt;a href=&quot;#使用算法操作流迭代器&quot; class=&quot;headerlink&quot; title=&quot;使用算法操作流迭代器&quot;&gt;&lt;/a&gt;使用算法操作流迭代器&lt;/h2&gt;&lt;p&gt;下面是一个例子，我们可以用一对istream_iterator来调用accumulate:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;istream_iterator&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; in(&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;),eof;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; accumulate(in,eof,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此调用会计算出从标准输入读取的值的和。&lt;/p&gt;
&lt;h2 id=&quot;反向迭代器&quot;&gt;&lt;a href=&quot;#反向迭代器&quot; class=&quot;headerlink&quot; title=&quot;反向迭代器&quot;&gt;&lt;/a&gt;反向迭代器&lt;/h2&gt;&lt;p&gt;反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。对于反向迭代器，递增操作会移动到前面的元素，递减操作会移动到后面的元素。&lt;br&gt;除了forward_list之外，其他容器都支持反向迭代器。&lt;br&gt;下图显示了一个名为vec的假设的vector上的4中迭代器：&lt;br&gt;&lt;img src=&quot;../../../../img/18e02b2b-77e6-4516-ab8b-6066f62cab0a.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;虽然颠倒递增和递减运算符的含义可能看起来令人混淆，但这样做使我们可以用算法透明地向前或向后处理容器。例如，可以通过向sort传递一队反向迭代器来将vector整理为递减序：&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sort(&lt;span class=&quot;name&quot;&gt;vec&lt;/span&gt;.begin(),vec.end())&lt;span class=&quot;comment&quot;&gt;;//按照“正常序”排列vec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sort(&lt;span class=&quot;name&quot;&gt;vec&lt;/span&gt;.cbegin(),vec.cend())&lt;span class=&quot;comment&quot;&gt;;//按逆序排列vec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;迭代器类别&quot;&gt;&lt;a href=&quot;#迭代器类别&quot; class=&quot;headerlink&quot; title=&quot;迭代器类别&quot;&gt;&lt;/a&gt;迭代器类别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;输入迭代器 （只读，不写；单遍扫描，只能递增）&lt;/li&gt;
&lt;li&gt;输出迭代器（只写，不读；单遍扫描，只能递增）&lt;/li&gt;
&lt;li&gt;前向迭代器（可读写；多遍扫描，只能递增）&lt;/li&gt;
&lt;li&gt;双向迭代器（可读写；多遍扫描，可递增递减）&lt;/li&gt;
&lt;li&gt;随机访问迭代器（可读写；多遍扫描，支持全部迭代器运算）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;算法形参模式&quot;&gt;&lt;a href=&quot;#算法形参模式&quot; class=&quot;headerlink&quot; title=&quot;算法形参模式&quot;&gt;&lt;/a&gt;算法形参模式&lt;/h1&gt;&lt;p&gt;大多数算法具有如下的4种形式之一：&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alg(&lt;span class=&quot;name&quot;&gt;beg&lt;/span&gt;,end,other args)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alg(&lt;span class=&quot;name&quot;&gt;beg&lt;/span&gt;,end,dest,other args)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alg(&lt;span class=&quot;name&quot;&gt;beg&lt;/span&gt;,end,beg2,other args)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alg(&lt;span class=&quot;name&quot;&gt;beg&lt;/span&gt;,end,beg2,end2,other args)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;alg是算法的名字，beg,end表示算法所操作的输入范围。几乎所有算法都接受一个输入范围，是否有其他参数依赖于要执行的操作。而使用dest时是基于一个假设：按其需要写入数据，不管写入多少个元素都是安全的。接受单独beg2时，将从beg2作为输入范围中的首元素，此范围的结束位置未指定，这些算法假定从beg2开始的范围与beg和end所表示的范围至少一样大。beg2,end2是表示这个算法接受两个完整指定的范围。&lt;/p&gt;
&lt;h1 id=&quot;算法命名规则&quot;&gt;&lt;a href=&quot;#算法命名规则&quot; class=&quot;headerlink&quot; title=&quot;算法命名规则&quot;&gt;&lt;/a&gt;算法命名规则&lt;/h1&gt;&lt;p&gt;除了参数规范外，算法还遵循一套命名和重载规范。&lt;/p&gt;
&lt;h2 id=&quot;一些算法使用重载形式传递一个谓词&quot;&gt;&lt;a href=&quot;#一些算法使用重载形式传递一个谓词&quot; class=&quot;headerlink&quot; title=&quot;一些算法使用重载形式传递一个谓词&quot;&gt;&lt;/a&gt;一些算法使用重载形式传递一个谓词&lt;/h2&gt;&lt;p&gt;接受谓词参数来代替&lt;code&gt;&amp;lt;&lt;/code&gt;或&lt;code&gt;==&lt;/code&gt;运算符的算法，以及那些不接受额外参数的算法，通常都是重载的函数。&lt;/p&gt;
&lt;h2 id=&quot;if版本&quot;&gt;&lt;a href=&quot;#if版本&quot; class=&quot;headerlink&quot; title=&quot;_if版本&quot;&gt;&lt;/a&gt;_if版本&lt;/h2&gt;&lt;p&gt;接受一个元素值的算法通常有另一个不同名的版本（并不是重载的版本），这块是为了避免编译器歧义，接受谓词参数的算法都有附加的&lt;code&gt;_if&lt;/code&gt;前缀。&lt;/p&gt;
&lt;h2 id=&quot;区分拷贝的版本和不拷贝的版本&quot;&gt;&lt;a href=&quot;#区分拷贝的版本和不拷贝的版本&quot; class=&quot;headerlink&quot; title=&quot;区分拷贝的版本和不拷贝的版本&quot;&gt;&lt;/a&gt;区分拷贝的版本和不拷贝的版本&lt;/h2&gt;&lt;p&gt;例如&lt;code&gt;reverse&lt;/code&gt;函数，重排之后覆盖掉原有空间的函数及拷贝到dest中的算法具体如下所示&lt;br&gt;&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;reverse&lt;/span&gt;(beg,&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//反转输入范围中元素的顺序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reverse_copy(beg,&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;,dest);&lt;span class=&quot;comment&quot;&gt;//将元素按逆序拷贝到dest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一些算法同时提供_copy和_if版本，这些版本接受一个目的位置迭代器和一个谓词。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;除了每个容器定义的迭代器之外，标准库在头文件iterator中还定义了额外几种迭代器。这些迭代器包括以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入迭代器：这些迭代器被绑定到一个容器上，可用来向容器插入元素&lt;/li&gt;
&lt;li&gt;流迭代器：这些迭代器被绑定到输入或输出流上，可用来遍历所有关联的IO流&lt;/li&gt;
&lt;li&gt;反向迭代器：这些迭代器向后而不是向前移动。除了forward_list之外的标准库容器都有反向迭代器&lt;/li&gt;
&lt;li&gt;移动迭代器：这些专用的迭代器不是拷贝其中的元素，而是移动它们
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.bravel.com.cn/tags/C/"/>
    
      <category term="迭代器" scheme="http://blog.bravel.com.cn/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux调试技术之gdb的使用</title>
    <link href="http://blog.bravel.com.cn/2016/07/20/Linux%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E4%B9%8Bgdb%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.bravel.com.cn/2016/07/20/Linux调试技术之gdb的使用/</id>
    <published>2016-07-20T12:49:26.000Z</published>
    <updated>2016-07-20T14:53:21.129Z</updated>
    
    <content type="html">&lt;p&gt;gdb是一个由GNU开源组织发布的，在UNIX/Linux操作系统下的，基于命令行的，功能强大的程序调试工具。本文主要讨论在Linux系统下gdb调试工具的基本使用。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gdb简介&quot;&gt;&lt;a href=&quot;#gdb简介&quot; class=&quot;headerlink&quot; title=&quot;gdb简介&quot;&gt;&lt;/a&gt;gdb简介&lt;/h2&gt;&lt;p&gt;gdb是由GNU开源组织发布的一个强大的在UNIX/Linux操作系统下的程序调试工具，gdb主要帮助工程师完成下面4个方面的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动程序，可以按照工程师自定义的要求随心所欲的运行程序&lt;/li&gt;
&lt;li&gt;让被调试的程序在工程师指定的断点处停住，断点可以是条件表达式&lt;/li&gt;
&lt;li&gt;当程序被停住时，可以检查此时程序中所发生的事，并追索上文&lt;/li&gt;
&lt;li&gt;动态地改变程序的执行环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;启动gdb&quot;&gt;&lt;a href=&quot;#启动gdb&quot; class=&quot;headerlink&quot; title=&quot;启动gdb&quot;&gt;&lt;/a&gt;启动gdb&lt;/h2&gt;&lt;p&gt;对C/C++程序的调试，需要在编译前加上-g的选项，即&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$g&lt;/span&gt;++ -&lt;span class=&quot;keyword&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;.cpp -o &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调试可执行文件，即gdb后接可执行文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$gdb&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当程序非法执行后core dump后产生的文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$gdb&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; core&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果程序是一个服务程序，则可以指定这个服务程序运行时的进程ID，gdb会自动attach上去，并调试它。程序应当是在PATH中可以搜索的到。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$gdb&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; &amp;lt;PID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gdb交互命令&quot;&gt;&lt;a href=&quot;#gdb交互命令&quot; class=&quot;headerlink&quot; title=&quot;gdb交互命令&quot;&gt;&lt;/a&gt;gdb交互命令&lt;/h2&gt;&lt;p&gt;启动gdb后，进入到交互模式，可以通过以下命令完成对程序的调试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 运行 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run(简记为r)：其作用是运行程序，当遇到断点后，程序会自动在停止在断点处，等待用户输入下一步的命令&lt;/li&gt;
&lt;li&gt;continue(简记为c)：其作用是继续执行，到下一个断点处或运行至程序结束&lt;/li&gt;
&lt;li&gt;next(简记为n)：单步跟踪程序，当遇到函数调用时，并不进入到该函数体内。此命令与step的主要区别是，step遇到函数时会跟进到函数内部中进行运行，而next是直接调用函数，并不会跟进到函数体内部&lt;/li&gt;
&lt;li&gt;step(简记为s)：单步调试，如果遇到函数调用，会跟进到函数体内部&lt;/li&gt;
&lt;li&gt;until：当在一个循环体内单步跟踪时，这个命令可以直接运行直到退出循环体&lt;/li&gt;
&lt;li&gt;until+行号 ：运行至某行，不仅仅是用来跳出循环的 &lt;/li&gt;
&lt;li&gt;finish：运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息&lt;/li&gt;
&lt;li&gt;call 函数名(参数)：调用程序中可见的函数，并传递参数进去&lt;/li&gt;
&lt;li&gt;quit(简记为q)：退出gdb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 关于断点 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;break n(简记为b n)：在第n行处设置断点（可以带上代码路径和代码名称）&lt;/li&gt;
&lt;li&gt;break [break-args] if (condition)：条件断点，当满足条件时进入断点&lt;/li&gt;
&lt;li&gt;delete 断点号n：删除第n个断点&lt;/li&gt;
&lt;li&gt;disable断点号n：关闭第n个断点&lt;/li&gt;
&lt;li&gt;enable断点号n：开启第n个断点&lt;/li&gt;
&lt;li&gt;clear行号n：清除第n行的断点&lt;/li&gt;
&lt;li&gt;info b：显示当前程序的断点设置情况&lt;/li&gt;
&lt;li&gt;delete breakpoints：清除所有断点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 关于源码显示 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list(简记为l)：其作用就是列出程序的源代码，默认每次显示10行，连续输入会显示接下来的10行代码&lt;/li&gt;
&lt;li&gt;list 行号：将显示已当前文件以行号为中心的前后10行代码&lt;/li&gt;
&lt;li&gt;list 函数名：将显示“函数名”所在函数的源代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 打印表达式 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print 表达式(简记为p)：其中表达式可以是任何当前正在被测试程序的有效表达式，比如当前正在调试程序的程序，包括数字，变量甚至是函数调用&lt;/li&gt;
&lt;li&gt;print a：将显示整数a的值&lt;/li&gt;
&lt;li&gt;print ++a：将把a中的值加1，并显示出来&lt;/li&gt;
&lt;li&gt;print gdb_test(1)：将以整数1（也可为变量）作为参数调用gdb_test()函数&lt;/li&gt;
&lt;li&gt;display 表达式：在单步运行时非常有用，它将在每次单步表达式进行指令之后，紧接着输出被设置的表达式及值&lt;/li&gt;
&lt;li&gt;watch 表达式：设置一个监视点，一旦被监视的表达式发生变化时，gdb将强行终止正在被调试的程序&lt;/li&gt;
&lt;li&gt;whatis：查询变量或函数&lt;/li&gt;
&lt;li&gt;info function：查询函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 查询运行信息 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where/bt：当前运行的堆栈列表&lt;/li&gt;
&lt;li&gt;bt backtrace：显示当前调用堆栈&lt;/li&gt;
&lt;li&gt;up/down：改变堆栈显示的深度&lt;/li&gt;
&lt;li&gt;set args 参数：指定运行时的参数&lt;/li&gt;
&lt;li&gt;show args：查看设置好的参数&lt;/li&gt;
&lt;li&gt;info program：来查看程序是否在运行，以及进程号，被暂停的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 分割窗口 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;layout：用于分割窗口，可以一边查看代码，一边测试&lt;/li&gt;
&lt;li&gt;layout src：显示源代码窗口&lt;/li&gt;
&lt;li&gt;layout asm：显示反汇编窗口&lt;/li&gt;
&lt;li&gt;layout regs：显示源代码/反汇编和CPU寄存器窗口&lt;/li&gt;
&lt;li&gt;layout split：显示源代码和反汇编窗口&lt;/li&gt;
&lt;li&gt;Ctrl+L：刷新窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;番外篇&quot;&gt;&lt;a href=&quot;#番外篇&quot; class=&quot;headerlink&quot; title=&quot;番外篇&quot;&gt;&lt;/a&gt;番外篇&lt;/h2&gt;&lt;p&gt;gdb有一个增强工具——cgdb，主要功能就是可以在调试的同时显示代码，界面类似vim，其他使用和gdb基本相同。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/haoel/article/details/2879&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用GDB调试程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/21cnbao/article/details/7385161&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux gdb调试器用法全面解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docs » 工具参考篇 » 1. gdb 调试利器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lesca.me/archives/gdb-breakpoints-command-list-watchpoint.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GDB笔记（二）：条件断点、命令列表、监视点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;gdb是一个由GNU开源组织发布的，在UNIX/Linux操作系统下的，基于命令行的，功能强大的程序调试工具。本文主要讨论在Linux系统下gdb调试工具的基本使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.bravel.com.cn/tags/Linux/"/>
    
      <category term="调试" scheme="http://blog.bravel.com.cn/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="gdb" scheme="http://blog.bravel.com.cn/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>Linux调试技术之内存泄露</title>
    <link href="http://blog.bravel.com.cn/2016/07/20/Linux%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://blog.bravel.com.cn/2016/07/20/Linux调试技术之内存泄露/</id>
    <published>2016-07-20T06:50:47.000Z</published>
    <updated>2016-07-20T12:48:50.600Z</updated>
    
    <content type="html">&lt;p&gt;本文主要讨论在Linux系统下关于出现内存泄露的调试方法，主要使用内存调试工具memwatch 和yet another malloc debugger(YAMD)来进行调试。主要针对内存泄露问题来进行研究。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讨论在Linux系统下关于出现内存泄露的调试方法，主要使用内存调试工具memwatch 和yet another malloc debugger(YAMD)来进行调试。主要针对内存泄露问题来进行研究。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.bravel.com.cn/tags/Linux/"/>
    
      <category term="内存泄露" scheme="http://blog.bravel.com.cn/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>利用网易企业邮设置自己域名下的邮箱</title>
    <link href="http://blog.bravel.com.cn/2016/06/01/%E5%88%A9%E7%94%A8%E7%BD%91%E6%98%93%E4%BC%81%E4%B8%9A%E9%82%AE%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E9%82%AE%E7%AE%B1/"/>
    <id>http://blog.bravel.com.cn/2016/06/01/利用网易企业邮设置自己域名下的邮箱/</id>
    <published>2016-06-01T14:30:55.000Z</published>
    <updated>2016-07-20T11:57:52.172Z</updated>
    
    <content type="html">&lt;p&gt;有了域名以后就想多折腾折腾，昨天突然想到可以做一个自己的域名邮箱，晚上就谷歌了一下，发现并不是很复杂，就试着做了一下，今天早上就通过了审核，@bravel.com.cn邮箱get。回顾了一下，做做记录。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;所需原材料&quot;&gt;&lt;a href=&quot;#所需原材料&quot; class=&quot;headerlink&quot; title=&quot;所需原材料&quot;&gt;&lt;/a&gt;所需原材料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一个域名&lt;/li&gt;
&lt;li&gt;找一个可以申请企业域名的邮箱服务提供商（博主选择了&lt;a href=&quot;http://ym.163.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易免费企业邮&lt;/a&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;注册一个企业邮账号，这个就不赘述了&lt;/li&gt;
&lt;li&gt;域名解析设置，博主的域名是由腾讯云提供服务的，所以以其为例。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在域名解析页面下添加邮件交换记录（MX），域名由邮箱服务提供商提供，网易免费企业邮的域名为：&lt;code&gt;my.ym.163.com&lt;/code&gt;。主机记录一般填@，例如博主的填@时，邮箱域名就为&lt;code&gt;@bravel.com.cn&lt;/code&gt;，如果填mail的话，邮箱域名就变为了&lt;code&gt;@mail.bravel.com.cn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增加文本记录，类型为txt，具体内容为：&lt;code&gt;v=spf1 include:spf.163.com ~all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;nslookup&lt;/code&gt;指令来进行验证,在命令行模式下输入如下的指令&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nslookup -qt-=mx bravel&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.cn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;nslookup指令是用来检查DNS信息。即查询域名对应的IP地址，包括A类记录和CNAME记录，如果查到的是CNAME记录还会返回别名记录的设置情况。&lt;/p&gt;
&lt;p&gt;至此，设置部分就结束了，等待网易验证解析通过以后就可以愉快的使用了。&lt;br&gt;PS:&lt;code&gt;p_li@bravel.com.cn&lt;/code&gt;邮箱今天开始正式投入使用啦。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000000367962&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何设置自己域名下的邮箱？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_701c52e90101akcl.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;小公司如何免费建独立域名免费企业邮箱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://app.ym.163.com/ym/help/help-hmail.html#3.6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易免费企业邮帮助中心&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/earl86/archive/2009/02/06/1666439.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用cmd命令——nslookup命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://book.51cto.com/art/200709/55424.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用nslookup命令检查DNS信息&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有了域名以后就想多折腾折腾，昨天突然想到可以做一个自己的域名邮箱，晚上就谷歌了一下，发现并不是很复杂，就试着做了一下，今天早上就通过了审核，@bravel.com.cn邮箱get。回顾了一下，做做记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="邮箱，域名解析" scheme="http://blog.bravel.com.cn/tags/%E9%82%AE%E7%AE%B1%EF%BC%8C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Redis简介及在CentOS6.5下的安装</title>
    <link href="http://blog.bravel.com.cn/2016/04/24/Redis%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9C%A8CentOS6-5%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.bravel.com.cn/2016/04/24/Redis简介及在CentOS6-5下的安装/</id>
    <published>2016-04-24T08:05:51.000Z</published>
    <updated>2016-07-19T07:45:39.386Z</updated>
    
    <content type="html">&lt;p&gt;经过和前辈交流并结合自己的反思觉得去阅读一些质量比较好的源码是提升自己能力非常重要的一环，所以决定要去读一些好的源码。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在选择哪一段代码来阅读的时候我需要考虑几个重要因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间成本（要做的事情太多）&lt;/li&gt;
&lt;li&gt;阅读难易程度&lt;/li&gt;
&lt;li&gt;代码量（也是出于时间成本的考虑）&lt;/li&gt;
&lt;li&gt;与自己准备做的要有些相关性&lt;/li&gt;
&lt;li&gt;相关文档资料、博客比较多，最好有很多人在阅读讨论这段代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这些因素考虑之后，我觉得Redis的源码阅读对我来说比较合适。代码量基本在五万行之内，而且这个代码阅读的人很多，讨论的人很多，还有很多相关的书籍。难度目前还不好评估。而Redis作为开源的，C语言开发的，key-value型数据库，良好的开发氛围和严谨的版本发布机制使得Redis的稳定版非常可靠，对Redis以后的发展还是很看好的，所以去扒一遍它的源码我觉得还是很有意义的。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Redis是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如：字符串（strings），散列（hashes），列表（lists），集合（sets），有序集合（sorted sets）与范围查询，bitmaps，hyperloglogs和地理空间（geospatial）索引半径查询。Redis内置了：复制（replication），LUA脚本（Lua scripting），LRU驱动事件（LRU eviction），事务（transactions）和不同级别的磁盘持久化（persistence），并通过Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下，Redis是一个开源的、高性能、基于键值对的缓存和存储系统，通过提供多种键值数据类型来适应不同场景下的缓存和存储需求。&lt;/p&gt;
&lt;h2 id=&quot;特性之存储结构&quot;&gt;&lt;a href=&quot;#特性之存储结构&quot; class=&quot;headerlink&quot; title=&quot;特性之存储结构&quot;&gt;&lt;/a&gt;特性之存储结构&lt;/h2&gt;&lt;p&gt; Redis的存储结构与字典、映射或称关联数组这样的数据结构比较类似，比如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dict[&amp;quot;key&amp;quot;] = &amp;quot;value&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中dict就是一个字典结构变量，字符串”key”是键名，而”value”是键值，在字典中我们可以设置或者获取键名对应的键值，也可以删除一个键。&lt;/p&gt;
&lt;p&gt;Redis支持多种键值数据类型，到目前为止包括的数据类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串类型&lt;/li&gt;
&lt;li&gt;散列类型&lt;/li&gt;
&lt;li&gt;列表类型&lt;/li&gt;
&lt;li&gt;集合类型&lt;/li&gt;
&lt;li&gt;有序集合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特性之内存存储和持久化&quot;&gt;&lt;a href=&quot;#特性之内存存储和持久化&quot; class=&quot;headerlink&quot; title=&quot;特性之内存存储和持久化&quot;&gt;&lt;/a&gt;特性之内存存储和持久化&lt;/h2&gt;&lt;p&gt;Redis数据库中所有的数据都存储在内存中，由于内存的读写速度远远快于硬盘，因此，Redis在性能上对比其他基于硬盘的数据库有着很不错的优势。&lt;br&gt;将数据存储在内存中也有问题，当程序退出后内存中的数据会丢失。不过Redis提供了对持久化的支持，即可以将内存中的数据异步写入硬盘中，同时不影响继续提供服务。&lt;/p&gt;
&lt;h2 id=&quot;部署Redis到CentOS下&quot;&gt;&lt;a href=&quot;#部署Redis到CentOS下&quot; class=&quot;headerlink&quot; title=&quot;部署Redis到CentOS下&quot;&gt;&lt;/a&gt;部署Redis到CentOS下&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;环境及安装包&lt;ul&gt;
&lt;li&gt;CentOS release 6.5 (Final)&lt;/li&gt;
&lt;li&gt;Linux version 2.6.32-504.30.3.el6.x86_64 (mockbuild@c6b8.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) )&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.redis.io/releases/redis-3.0.7.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redis-3.0.7.tar.gz&lt;/a&gt;  (注：在安装Redis前需要了解Redis的版本规则以选择最适合自己的版本，Redis约定次版本号为偶数时的版本是稳定版，奇数是非稳定版，生产环境下一般需要使用稳定版本。本文选择了较新的稳定版本3.0.7)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查安装依赖程序&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; gcc-c++ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -y tcl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; wget&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取源码&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//download.redis.io/releases/redis-3.0.7.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压源码&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -xvzf redis-&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv redis-&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; /usr/local/redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译安装&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/&lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt;/redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt; install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置配置文件路径&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; /etc/redis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp redis&lt;span class=&quot;selector-class&quot;&gt;.conf&lt;/span&gt; /etc/redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt; /etc/redis/redis.&lt;span class=&quot;keyword&quot;&gt;conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 在conf文件里，将daemonize 改为yes(即no -&amp;gt; yes)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动&lt;/p&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;meta-keyword&quot;&gt;/bin/&lt;/span&gt;redis-server &lt;span class=&quot;meta-keyword&quot;&gt;/etc/&lt;/span&gt;redis/redis.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看启动&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ps&lt;/span&gt; -ef | &lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用客户端&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;redis-cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&lt;span class=&quot;selector-tag&quot;&gt;value&lt;/span&gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭客户端&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-cli &lt;span class=&quot;built_in&quot;&gt;shutdown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启启动配置&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &lt;span class=&quot;string&quot;&gt;&quot;/usr/local/bin/redis-server /etc/redis/redis.conf &amp;amp;&quot;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;/etc/rc.local&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开启启动要配置在rc.local中，而/etc/profile文件，需要有用户登录了，才会被执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们就可以在本机上测试Redis基本指令了。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.redis.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis中文官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Redis入门指南，李子骅&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.centoscn.com/CentOS/help/2015/0311/4853.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看centos系统版本命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002685224&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS6 安装 Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经过和前辈交流并结合自己的反思觉得去阅读一些质量比较好的源码是提升自己能力非常重要的一环，所以决定要去读一些好的源码。&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://blog.bravel.com.cn/tags/Redis/"/>
    
      <category term="CentOS" scheme="http://blog.bravel.com.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>初识markdown</title>
    <link href="http://blog.bravel.com.cn/2016/04/15/%E5%88%9D%E8%AF%86markdown/"/>
    <id>http://blog.bravel.com.cn/2016/04/15/初识markdown/</id>
    <published>2016-04-15T12:21:31.000Z</published>
    <updated>2016-07-22T08:04:18.196Z</updated>
    
    <content type="html">&lt;p&gt;博主命途多舛，自己的博客辗转挂靠在SAE，腾讯云，现在终于选择了github+Hexo来实现自己的博客（ps:最好不要逼我再搬家了！）因为之前的博客一直在用wordpress，所以这也是第一次接触markdown的语法。找了一些博客来学习一下，幸亏不是很难，mark一些常用的下来，以备后面自己查阅。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://lutaf.com/markdown-simple-usage.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1分钟学会Markdown语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎样使用Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/q81RER&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;献给写作者的 Markdown 新手指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/PpDNMG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown写作浅谈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://maxiang.io/#fn:demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;欢迎使用马克飞象&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;博主命途多舛，自己的博客辗转挂靠在SAE，腾讯云，现在终于选择了github+Hexo来实现自己的博客（ps:最好不要逼我再搬家了！）因为之前的博客一直在用wordpress，所以这也是第一次接触markdown的语法。找了一些博客来学习一下，幸亏不是很难，mark一些常用的下来，以备后面自己查阅。&lt;br&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://blog.bravel.com.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>写好每一次提交的message</title>
    <link href="http://blog.bravel.com.cn/2016/04/15/%E5%86%99%E5%A5%BD%E6%AF%8F%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4%E7%9A%84message/"/>
    <id>http://blog.bravel.com.cn/2016/04/15/写好每一次提交的message/</id>
    <published>2016-04-15T12:00:59.000Z</published>
    <updated>2016-07-18T08:41:55.511Z</updated>
    
    <content type="html">&lt;p&gt;之前就开始用git来对自己的项目进行一些管理工作，过后去阅读自己的log日志其实会发现不那么清晰，几周前自己提交的每个版本做了哪些工作都不能准确判断，这个让我很是尴尬。自己也去搜索了一些关于git提交的时候的message的写法建议，遂整理出了这样一篇文章。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么要关注提交信息&quot;&gt;&lt;a href=&quot;#为什么要关注提交信息&quot; class=&quot;headerlink&quot; title=&quot;为什么要关注提交信息&quot;&gt;&lt;/a&gt;为什么要关注提交信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;加快 Reviewing Code 的过程&lt;/li&gt;
&lt;li&gt;帮助我们写好 release note&lt;/li&gt;
&lt;li&gt;很久以后帮助自己快速想起某个分支，tag或者commit增加了什么功能，改变了那些代码&lt;/li&gt;
&lt;li&gt;让其他的开发者在运行 git blame 时方便快捷找到问题&lt;/li&gt;
&lt;li&gt;一个好的提交信息，会帮助我们提高项目的整体质量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;七个很棒的git提交信息规则&quot;&gt;&lt;a href=&quot;#七个很棒的git提交信息规则&quot; class=&quot;headerlink&quot; title=&quot;七个很棒的git提交信息规则&quot;&gt;&lt;/a&gt;七个很棒的git提交信息规则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用一个空行隔开标题和正文&lt;/li&gt;
&lt;li&gt;限制标题字数在50个字符内&lt;/li&gt;
&lt;li&gt;用大写字母写标题行&lt;/li&gt;
&lt;li&gt;不要用句号结束标题行&lt;/li&gt;
&lt;li&gt;在标题行使用祈使语气&lt;/li&gt;
&lt;li&gt;正文在72个字符处换行&lt;/li&gt;
&lt;li&gt;使用正文解释是什么和为什么，而不是如何做&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个推荐的 commit message 应该是这样的：&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Redirect user &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; requested page &lt;span class=&quot;keyword&quot;&gt;after&lt;/span&gt; login&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://trello.com/path/&lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;/relevant/card&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Users were being redirected &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; home page &lt;span class=&quot;keyword&quot;&gt;after&lt;/span&gt; login, which is less&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useful than redirecting &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; page they had originally requested &lt;span class=&quot;keyword&quot;&gt;before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;being redirected &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; login form.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Store requested path &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; session &lt;span class=&quot;built_in&quot;&gt;variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Redirect &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; stored location &lt;span class=&quot;keyword&quot;&gt;after&lt;/span&gt; successfully logging &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; user&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;注释要回答如下的信息&quot;&gt;&lt;a href=&quot;#注释要回答如下的信息&quot; class=&quot;headerlink&quot; title=&quot;注释要回答如下的信息&quot;&gt;&lt;/a&gt;注释要回答如下的信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么这次修改是必要的？&lt;br&gt;要告诉 Reviewers ，你的提交包含什么改变。让他们更容易审核代码和忽略无关的改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何解决的问题？&lt;br&gt;这块并不是说技术细节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些变化可能影响那些地方？&lt;br&gt;这个是最需要回答的问题。并且在一次提交中尽量只做1、2个变化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://h2ex.com/175&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;写好Git Commit信息的7个建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ruby-china.org/topics/15737&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;写出好的 commit message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web-design-weekly.com/2013/09/01/a-better-git-commit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Better Git Commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.uyo6cb12dt6w&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS Git Commit Message Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstack.org/wiki/GitCommitMessages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitCommitMessages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前就开始用git来对自己的项目进行一些管理工作，过后去阅读自己的log日志其实会发现不那么清晰，几周前自己提交的每个版本做了哪些工作都不能准确判断，这个让我很是尴尬。自己也去搜索了一些关于git提交的时候的message的写法建议，遂整理出了这样一篇文章。&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.bravel.com.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Brave谈谈阿里巴巴缩招了</title>
    <link href="http://blog.bravel.com.cn/2015/09/02/Brave%E8%B0%88%E8%B0%88%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%A9%E6%8B%9B%E4%BA%86/"/>
    <id>http://blog.bravel.com.cn/2015/09/02/Brave谈谈阿里巴巴缩招了/</id>
    <published>2015-09-02T03:33:38.000Z</published>
    <updated>2016-04-16T09:55:56.560Z</updated>
    
    <content type="html">&lt;p&gt;阿里巴巴拥抱变换了，引发了我对互联网公司这个行业的一些思考吧。不知对错。仅做一家之言了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天在阿里巴巴集团的校招网上发布了一条名为——&lt;a href=&quot;https://campus.alibaba.com/noticeDetail.htm?code=tmsItemData2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里巴巴集团2016年校园招聘最新通知&lt;/a&gt;，具体内容如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;各位支持关注阿里巴巴校园招聘的同学，&lt;br&gt;你们好：&lt;br&gt;我们非常抱歉地通知：由于企业人才战略调整，阿里巴巴2016年校招名额确定将要缩减，各岗位将执行更加严格激烈的竞争。&lt;br&gt;阿里巴巴一贯要求员工“拥抱变化”，这是我们16年来始终坚持的企业文化，但我们从来不会，也没有任何理由要求别人“拥抱变化”，更不能因为内部的原因，认为应聘者理应承担变化的结果。&lt;br&gt;所以，我们必须要对同学们真诚地说声“对不起”，真的很抱歉，由于我们的原因，让你们的求职之路面临了更多变数。&lt;br&gt;同时，我们也恳请各位同学，不要因为校招名额的变化而过早地放弃竞争，阿里校招会对“聪明、乐观、皮实、自省”的同学热情抛出橄榄枝。&lt;br&gt;所以，如果你是一个专业水平过硬、面对问题乐观积极应对、拥有足够的抗压能力同时又能不断自省突破的同学，那么请将更严格的筛选当做入职阿里的第一项挑战，积极勇敢地迎战吧！&lt;br&gt;我们将通过系统化、精细化、科学化的方式方法，甄别所有参与阿里校招的同学们。对于脱颖而出的你，我们将实施全方位的成长计划，让每一位加入阿里的同学快速成长、实现价值，携手创造互联网的明天！&lt;br&gt;2015-09-1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是阿里巴巴公司在2015年校招前夕发布的一个公告，昨天（2015年9月1日）发布的。&lt;/p&gt;
&lt;h2 id=&quot;谈谈&quot;&gt;&lt;a href=&quot;#谈谈&quot; class=&quot;headerlink&quot; title=&quot;谈谈&quot;&gt;&lt;/a&gt;谈谈&lt;/h2&gt;&lt;p&gt;很佩服阿里巴巴敢这样做，公司战略调整，紧接着就发出了公告，并没有什么遮遮掩掩，也让学生提早有了心理准备，大公司的责任感还是有的。其实突然缩招，让我有种不安的感觉。记得之前宣传的时候，阿里号称是要狂砍3000+的校招生，可以几个月以后就发出一个这样的公告，并且也没有公布具体数目，到底发生了什么？而且宣称要降薪！起薪降到10K/月，到底发生了什么？&lt;/p&gt;
&lt;p&gt;我来谈谈我的看法吧，我觉得都是水涨船高惹的祸。大家都知道的互联网这几年越来越热，热在哪里？就是投资者懂或不懂，都将滚烫的现金投入到这个产业来，互联网产业里面现在的热钱的具体数目我肯定不知道，我能知道的只是看到一个个几人的创业团队稍微有些新意甚至有时候只是因为leader善于鼓吹，上百万的风投就来了。我并不是鄙视这种投资方式，有钱任性我管不到，可是对这个产业这样优待真的好么。如果有一天精明的投资人冷静下来，这种巨大的落差该多么可怕。虽然我是一个做技术的，可是一荣俱荣一损俱损的道理也是懂得的。而且这种任性的投资也形成了互联网公司，尤其是小型创业公司的企业文化，就是高逼格的工作环境，弹性工作制，尤其是高的惊人的工资，对比一下其他产业用一个惊人真是无法体现是有多惊人！作为一个开发人员我自然是喜欢这样的待遇，甚至都有些迫不及待想去公司享受这种高大上的福利！（不好意思，跑偏了）我还是接着说招聘吧。&lt;/p&gt;
&lt;p&gt;前面说的水涨船高，并没有展开，这里说说。校招对一个大企业有多重要这自然是不言而喻的，尤其是大公司，大公司需要有自己的人才储备。而互联网公司为了抢夺优秀的毕业生资源，一个最有力的武器就是薪酬。近年来互联网公司给应届生开出的offer薪酬数额真的开到有些惊人了。不过由此引出了两个问题：薪酬倒挂还有每年涨薪幅度很低。这两个问题也让BAT这种大公司获得了新兵训练营的荣誉称号。比如自己目前的职业规划就有先去这种公司学习几年，再！跳！槽！所以，阿里顶住压力，从战略层面做这样的调整，我觉得有可能是针对这个问题做的调整。对内，缓解老员工的不满情绪，对外，用自己的铁招牌仍然可以吸引不少优质应届生来，最重要是可以用不错的涨薪留住自己培养出来的储备力量，这个可能对企业更重要。&lt;/p&gt;
&lt;h2 id=&quot;预感&quot;&gt;&lt;a href=&quot;#预感&quot; class=&quot;headerlink&quot; title=&quot;预感&quot;&gt;&lt;/a&gt;预感&lt;/h2&gt;&lt;p&gt;关于阿里的缩招，我有几个预感。第一，可能是互联网的寒冬要来了，从阿里的股价就可以看出来，三个月内，从91美元跌至65美元左右，可以看出经济的不景气。而巨头公司尤其阿里这种玩金融的公司肯定会敏感的觉察到这个寒冬的来临。如果寒冬来临有什么后果？个人觉得对小的创业公司影响最大，他们前期基本0盈利，存活完全靠风投，一旦这个资金源停止烧钱游戏，创业公司不仅高薪成了泡影，可能自己能不能存活下来都是问题，所以阿里降薪缩招就是为了“窝冬”，让自己低成本的更容易的熬过这个寒冬，毕竟支付宝可以提供稳定的现金流，阿里对自己还是很有信心的。第二，说实话，我觉得阿里一直有政策优待，所以很容易受政府的政策影响，前段时间那个网上消费的限额其实就有些针对，这块其实我猜测很多，考虑到和谐的问题，就不讨论了。第三，可能是公司的转型，阿里的上市，公司其实发生了不小变化，至少从去年校招的一些学长还有同学那里听说到的，觉得员工心态发生变化，可能阿里觉得自己过了开拓期，现在需要的是稳步上升，这个时候的公司可能觉得底层的程序员就是一个砖头，一个螺丝帽，P4、P5级别的程序员并不需要多么有才华，所以降薪招不到比较牛的人，但招的也够用了。还有一种比较腹黑的想法，之前说的今年校招要狂砍3000+人只是一个噱头，为了吸引更多人投递简历，最终可以有更大的选择面，然后选最好的，如果真是这样，那千万不要爆出真像来。&lt;/p&gt;
&lt;p&gt;最后，希望投资人渐渐恢复冷静，希望互联网的泡沫，能缓慢的变小，而不是最终大到破。&lt;/p&gt;
&lt;p&gt;纯属一家之言，求轻喷。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;阿里巴巴拥抱变换了，引发了我对互联网公司这个行业的一些思考吧。不知对错。仅做一家之言了。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://blog.bravel.com.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>ADNS-9500使用心得</title>
    <link href="http://blog.bravel.com.cn/2015/02/25/ADNS-9500%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>http://blog.bravel.com.cn/2015/02/25/ADNS-9500使用心得/</id>
    <published>2015-02-25T03:07:42.000Z</published>
    <updated>2016-04-21T14:08:25.889Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;最近在给实验室做一个工程项目，功能要求：实现实时反馈某物体的位移距离（二维平面内）。通过考量各种传感器并考虑到这个情景和鼠标比较接近，所以去查了光电鼠标的工作原理，最终定下来使用原属Avago公司现属于PixArt公司的传感器ADNS-9500。整个关于ADNS-9500方面的开发主要集中在年前放假回家前的两周。发现网络上关于这个传感器的资料比较少，可能是因为功能比较小众吧，相关的开发人员比较少，既然我走过这条路了，就给后人留盏灯吧。在这里首先要谢谢PixArt公司深圳办事处黄工对我的帮助，谢谢回复我了一封邮件，也正是这封邮件才让我有可能在两周内实现它的主体功能。好了言归正传，开始谈谈我们的开发过程。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; class=&quot;headerlink&quot; title=&quot;工作原理&quot;&gt;&lt;/a&gt;工作原理&lt;/h2&gt;&lt;p&gt;激光鼠标在原理上和光电鼠标类似，只不过用激光代替了普通的LED灯，好处是可以在更多表面上使用。因为激光是相干波，几乎是单一波长，即使经过长距离的传播依然能保持良好的强度和波形。激光鼠标传感器获得影像的过程是根据激光照射在物体表面所产生的干涉条纹而形成的光斑点反射到传感器上获得的。而传统的光学鼠标是通过照射粗糙的表面的表面所产生的阴影来获得。因此激光能对表面的图像产生更大的反差，从而使得“CMOS”成像传感器得到的图像更容易辨别，提高鼠标的定位精确性。&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;MUC:C8051F410&lt;br&gt;IDE:Keil C51&lt;/p&gt;
&lt;h2 id=&quot;工作流程&quot;&gt;&lt;a href=&quot;#工作流程&quot; class=&quot;headerlink&quot; title=&quot;工作流程&quot;&gt;&lt;/a&gt;工作流程&lt;/h2&gt;&lt;p&gt;主要参考ADNS-9500的datasheet来书写。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向地址为0x3A的寄存器写入0x5A&lt;/li&gt;
&lt;li&gt;做至少50ms的延时&lt;/li&gt;
&lt;li&gt;从地址为0x02、0x03、0x04、0x05和0x06读取数据&lt;/li&gt;
&lt;li&gt;SROM下载 &lt;ul&gt;
&lt;li&gt;SROM下载首先在CONFIGURATION_IV_ADDR中选择SROM的size&lt;/li&gt;
&lt;li&gt;向SROM_Enable寄存器写入0x1D&lt;/li&gt;
&lt;li&gt;延时一个FRAME&lt;/li&gt;
&lt;li&gt;向SROM_ENABLE寄存器写入0x18开始SROM下载&lt;/li&gt;
&lt;li&gt;开始写入SROM时需要先从SROM_LOAD_BRUST寄存器开始写，这块我使用code变量将SROM的值存在了单片机的ROM里面，然后通过数组名字直接访问，从而避免使用EERPOM&lt;/li&gt;
&lt;li&gt;进行SROM_CHECK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使能激光源，将LASER_CTRL0寄存器的最低位置为0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，ADNS-9500的初始化就全部完成了，下来就是典型的SPI操作，发送寄存器地址值，读取对应寄存器的值。&lt;/p&gt;
&lt;h2 id=&quot;闲话&quot;&gt;&lt;a href=&quot;#闲话&quot; class=&quot;headerlink&quot; title=&quot;闲话&quot;&gt;&lt;/a&gt;闲话&lt;/h2&gt;&lt;p&gt;回顾这个过程，当时才开始写代码的时候真是一筹莫展，写完之后回过头看看。觉得当时进展不顺是因为数据手册读的不够好的结果。&lt;/p&gt;
&lt;p&gt;代码书写部分的心得，最好封装这样两个函数，一个是SPI操作的函数，一个是SPI操作sensor的函数，在每一次操作的时候都去置位一下NCS的值。这样封装，一来代码易读，并且也不太容易出错。&lt;/p&gt;
&lt;p&gt;至于调试经验部分，我是用的串口打印获取到的坐标数据，在PC上利用串口调试助手来观测数据是否正确与否。&lt;/p&gt;
&lt;p&gt;最后共享一份demo样例到我的&lt;a href=&quot;https://github.com/BraveRichard/ADNS-9500&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitbub&lt;/a&gt;，关于代码实现部分有什么问题可以给我发邮件，看到后我会及时回复的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;最近在给实验室做一个工程项目，功能要求：实现实时反馈某物体的位移距离（二维平面内）。通过考量各种传感器并考虑到这个情景和鼠标比较接近，所以去查了光电鼠标的工作原理，最终定下来使用原属Avago公司现属于PixArt公司的传感器ADNS-9500。整个关于ADNS-9500方面的开发主要集中在年前放假回家前的两周。发现网络上关于这个传感器的资料比较少，可能是因为功能比较小众吧，相关的开发人员比较少，既然我走过这条路了，就给后人留盏灯吧。在这里首先要谢谢PixArt公司深圳办事处黄工对我的帮助，谢谢回复我了一封邮件，也正是这封邮件才让我有可能在两周内实现它的主体功能。好了言归正传，开始谈谈我们的开发过程。&lt;br&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="http://blog.bravel.com.cn/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="专用芯片" scheme="http://blog.bravel.com.cn/tags/%E4%B8%93%E7%94%A8%E8%8A%AF%E7%89%87/"/>
    
  </entry>
  
</feed>
